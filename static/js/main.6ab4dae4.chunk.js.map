{"version":3,"sources":["component/Header.jsx","component/ToDoItem.jsx","component/ClearButton.jsx","component/ToDoList.jsx","App.js","index.js"],"names":["Header","_jsx","className","children","ToDoItem","_ref","taskData","completeTask","value","isCompleted","onClick","style","textDecoration","ClearButton","tasks","setTasks","isAnyTaskCompleted","some","task","onClickHandler","clearCompletedTasks","incompleteTasks","filter","clearToDoList","buttonText","isDisabled","length","type","disabled","ToDoList","initialTasksData","map","useState","_jsxs","_Fragment","index","newTasks","App","rootElement","document","getElementById","createRoot","render"],"mappings":"iKAIeA,MAJf,WACI,OAAOC,cAAA,MAAIC,UAAU,SAAQC,SAAC,aAClC,E,OCFe,SAASC,EAAQC,GAA8B,IAA7B,SAAEC,EAAQ,aAAEC,GAAcF,EACvD,MAAM,MAAEG,EAAK,YAAEC,GAAgBH,EAC/B,OACIL,cAAA,MAAIS,QAASH,EAAcL,UAAU,aAAYC,SAC7CF,cAAA,QACIU,MAAO,CACHC,eAAgBH,EAAc,eAAiB,QACjDN,SAEDK,KAIjB,CCbe,SAASK,EAAWR,GAAuB,IAAtB,MAAES,EAAK,SAAEC,GAAUV,EACnD,MAOMW,EAAqBF,EAAMG,MAAMC,GAASA,EAAKT,cAC/CU,EAAiBH,EARKI,KACxB,MAAMC,EAAkBP,EAAMQ,QAAQJ,IAAUA,EAAKT,cACrDM,EAASM,EAAgB,EAEPE,KAClBR,EAAS,GAAG,EAMVS,EAAaR,EAAqB,mBAAqB,QACvDS,EAA8B,IAAjBX,EAAMY,OACzB,OACIzB,cAAA,UACI0B,KAAK,SACLzB,UAAU,eACVQ,QAASS,EACTS,SAAUH,EAAWtB,SAEpBqB,GAGb,CCpBe,SAASK,IACpB,MAOMC,EAPe,CACjB,kBACA,uBACA,oBACA,oBACA,iBAEkCC,KAAKb,IAAI,CAC3CV,MAAOU,EACPT,aAAa,OAEVK,EAAOC,GAAYiB,mBAASF,GAMnC,OACIG,eAAAC,WAAA,CAAA/B,SAAA,CACI8B,eAAA,MAAI/B,UAAU,aAAYC,SAAA,CACJ,IAAjBW,EAAMY,QACHzB,cAAA,MAAIC,UAAU,kBAAiBC,SAAC,gCAInCW,EAAMiB,KAAI,CAACb,EAAMiB,IACdlC,cAACG,EAAQ,CAELE,SAAUY,EACVX,aAAcA,IAjBZ4B,KAClB,MAAMC,EAAW,IAAItB,GACrBsB,EAASD,GAAO1B,aAAe2B,EAASD,GAAO1B,YAC/CM,EAASqB,EAAS,EAckB7B,CAAa4B,IAF5BA,QAMjBlC,cAACY,EAAW,CAACC,MAAOA,EAAOC,SAAUA,MAGjD,CCrCe,SAASsB,IACtB,OACEJ,eAAA,OAAK/B,UAAU,cAAaC,SAAA,CAC1BF,cAACD,EAAM,IACPC,cAAC4B,EAAQ,MAGf,CCRA,MAAMS,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OAAOzC,cAACoC,EAAG,I","file":"static/js/main.6ab4dae4.chunk.js","sourcesContent":["function Header() {\r\n    return <h1 className=\"header\">To-Do App</h1>;\r\n}\r\n\r\nexport default Header;\r\n","export default function ToDoItem({ taskData, completeTask }) {\r\n    const { value, isCompleted } = taskData;\r\n    return (\r\n        <li onClick={completeTask} className=\"to-do-item\">\r\n            <span\r\n                style={{\r\n                    textDecoration: isCompleted ? \"line-through\" : \"none\",\r\n                }}\r\n            >\r\n                {value}\r\n            </span>\r\n        </li>\r\n    );\r\n}\r\n","export default function ClearButton({ tasks, setTasks }) {\r\n    const clearCompletedTasks = () => {\r\n        const incompleteTasks = tasks.filter((task) => !task.isCompleted);\r\n        setTasks(incompleteTasks);\r\n    };\r\n    const clearToDoList = () => {\r\n        setTasks([]);\r\n    };\r\n    const isAnyTaskCompleted = tasks.some((task) => task.isCompleted);\r\n    const onClickHandler = isAnyTaskCompleted\r\n        ? clearCompletedTasks\r\n        : clearToDoList;\r\n    const buttonText = isAnyTaskCompleted ? \"Remove Completed\" : \"Empty\";\r\n    const isDisabled = tasks.length === 0;\r\n    return (\r\n        <button\r\n            type=\"button\"\r\n            className=\"clear-button\"\r\n            onClick={onClickHandler}\r\n            disabled={isDisabled}\r\n        >\r\n            {buttonText}\r\n        </button>\r\n    );\r\n}\r\n","import { useState } from \"react\";\r\nimport ToDoItem from \"./ToDoItem\";\r\nimport ClearButton from \"./ClearButton\";\r\n\r\nexport default function ToDoList() {\r\n    const initialTasks = [\r\n        \"Read SpringBoot\",\r\n        \"Complete assignments\",\r\n        \"Prepare breakfast\",\r\n        \"Sleep for 2 hours\",\r\n        \"Take a shower\",\r\n    ];\r\n    const initialTasksData = initialTasks.map((task) => ({\r\n        value: task,\r\n        isCompleted: false,\r\n    }));\r\n    const [tasks, setTasks] = useState(initialTasksData);\r\n    const completeTask = (index) => {\r\n        const newTasks = [...tasks];\r\n        newTasks[index].isCompleted = !newTasks[index].isCompleted;\r\n        setTasks(newTasks);\r\n    };\r\n    return (\r\n        <>\r\n            <ul className=\"to-do-list\">\r\n                {tasks.length === 0 && (\r\n                    <li className=\"empty-list-item\">\r\n                        Nothing to do buddy. Sleep!\r\n                    </li>\r\n                )}\r\n                {tasks.map((task, index) => (\r\n                    <ToDoItem\r\n                        key={index}\r\n                        taskData={task}\r\n                        completeTask={() => completeTask(index)}\r\n                    />\r\n                ))}\r\n            </ul>\r\n            <ClearButton tasks={tasks} setTasks={setTasks} />\r\n        </>\r\n    );\r\n}\r\n","import \"./styles.css\";\nimport Header from \"./component/Header\";\nimport ToDoList from \"./component/ToDoList\";\n\nexport default function App() {\n  return (\n    <div className=\"Application\">\n      <Header />\n      <ToDoList />\n    </div>\n  );\n}\n","import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(<App />);\n"],"sourceRoot":""}